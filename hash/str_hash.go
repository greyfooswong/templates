package hash

/**
字符串哈希
思想是将字符串的每一位视作一个P进制的数
即ABCD = （1234）p
A映射1，B映射2，依次类推
*/

/**
NN的值根据题目给的字符串长度范围而定
P是一个经验值，131或13331，出现冲突概率极低，可以忽略不记
*/
const (
	NN = 100010
	P  = 131
)

/**
使用int64，则可以避免做取2^64模，因为int64长度最大是2^64，溢出时则自动取模
需要取模的原因是，字符串长度过长，不好处理，因此采用取模
hh存的是以当前字符为结尾的前缀字符串的哈希值，如abcde，如果当前遍历到b，则取的是ab的哈希值
*/
var hh, p [N]int64

/**
预处理p数组，p是进制，p[0] = 1, p[1] = P的1次方， p[2] = P的二次方
则当前位置的h[i]的值为，之前的所有数左移1位，因此将其哈希值 * P即可，之后再将当前的字符给加入到这个前缀中
*/
func make_str_hash(word string) {
	p[0] = 1
	for i := range word {
		p[i+1] = p[i] * P
		hh[i+1] = hh[i]*P + int64(word[i])
	}
}

/**
获取字符串中从l到r的字符串的哈希值
h[r]就是以r为结尾的前缀字符串的哈希值，取到l到r的串的哈希值，则可以将l前的字符串右移，将其对其成和r长度相同的字符串，然后用h[r]减去对其后的字符串
即可获得l到r的串的哈希值
*/
func get(l, r int) int64 {
	return hh[r] - hh[l-1]*p[r-l+1]
}
